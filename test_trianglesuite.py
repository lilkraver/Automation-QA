# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTrianglesuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_acuteScalene(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").click()
    element = self.driver.find_element(By.NAME, "vx")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.NAME, "vx").send_keys("60")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("70")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("80")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    assert self.driver.find_element(By.CSS_SELECTOR, "td > h3").text == "Acute Scalene Triangle"
    self.driver.close()
  
  def test_bigDegreeC(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys("1234567890")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Angle \\\"c\\\" too big."
    self.driver.close()
  
  def test_bigSides1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("12345678901234567890")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    self.driver.close()
  
  def test_degreeBorder1C(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys("1")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    self.driver.close()
  
  def test_degreeBorder179C(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys("179")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    self.driver.close()
  
  def test_degreeBorder180C(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys("180")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Angle \\\"c\\\" too big."
    self.driver.close()
  
  def test_emptyDegreeab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_emptyDegreeac(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys(" ")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("1")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_emptyDegreebc(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys(" ")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("1")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_emptyab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("1")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_emptyac(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_emptybc(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_emtyForm(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys(" ")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys(" ")
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_equilateral(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("5")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("5")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("5")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    assert self.driver.find_element(By.CSS_SELECTOR, "td > h3").text == "Equilateral Triangle"
    self.driver.close()
  
  def test_fourValsCabc(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("1")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide three positive values only. You have 4 now."
    self.driver.close()
  
  def test_fracNums1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("1,3")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_fracNums2ab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("1,3")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("1,3")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_letters1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("a")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_letters2ab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("a")
    self.driver.find_element(By.CSS_SELECTOR, "td:nth-child(1) tr:nth-child(2)").click()
    self.driver.find_element(By.NAME, "vy").send_keys("g")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_marks1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.CSS_SELECTOR, "td:nth-child(1) > table").click()
    self.driver.find_element(By.NAME, "vx").send_keys(".")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_marks2ab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.CSS_SELECTOR, "td:nth-child(1) tr:nth-child(2)").click()
    self.driver.find_element(By.NAME, "vx").send_keys("&")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(3)").click()
    self.driver.find_element(By.NAME, "vy").send_keys("&")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_negNums1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("-1")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_negNums2ab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("-1")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("-1")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_obtuseIsosceles(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("3")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("3")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("5")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    assert self.driver.find_element(By.CSS_SELECTOR, "td > h3").text == "Obtuse Isosceles Triangle"
    self.driver.close()
  
  def test_obtuseScalene(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("2")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("3")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("4")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    assert self.driver.find_element(By.CSS_SELECTOR, "td > h3").text == "Obtuse Scalene Triangle"
    self.driver.close()
  
  def test_rightScalene(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("3")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("4")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("5")
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".h2result").text == "Result"
    assert self.driver.find_element(By.CSS_SELECTOR, "td > h3").text == "Right Scalene Triangle"
    self.driver.close()
  
  def test_sQL1C(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys("select")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_sQL1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("select")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_triangleCondition123(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("2")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("3")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "The sum of two sides must be larger than the third."
    self.driver.close()
  
  def test_triangleCondition124(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("2")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("4")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "The sum of two sides must be larger than the third."
    self.driver.close()
  
  def test_triangleCondition224(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys(" ")
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("2")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("2")
    self.driver.find_element(By.NAME, "vz").click()
    self.driver.find_element(By.NAME, "vz").send_keys("4")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "The sum of two sides must be larger than the third."
    self.driver.close()
  
  def test_xSS1C(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vc").click()
    self.driver.find_element(By.NAME, "vc").send_keys("<script>")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_xSS1ahigh(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(3)").click()
    self.driver.find_element(By.NAME, "vy").send_keys("<SCRIPT>")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_xSS1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("<script>")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_zero1b(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("0")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
  def test_zero2ab(self):
    self.driver.get("https://www.calculator.net/triangle-calculator.html")
    self.driver.set_window_size(1050, 708)
    self.driver.find_element(By.NAME, "vx").click()
    self.driver.find_element(By.NAME, "vx").send_keys("0")
    self.driver.find_element(By.NAME, "vy").click()
    self.driver.find_element(By.NAME, "vy").send_keys("0")
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) input").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "font").text == "Please provide 3 positive values, including at least one side."
    self.driver.close()
  
